// <auto-generated />
using System;
using DynamicDashboard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DynamicDashboard.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240627063436_Charts")]
    partial class Charts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DynamicDashboard.Models.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChartType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataId")
                        .HasColumnType("int");

                    b.Property<int>("PositionCol")
                        .HasColumnType("int");

                    b.Property<int>("PositionRow")
                        .HasColumnType("int");

                    b.Property<int>("SizeCols")
                        .HasColumnType("int");

                    b.Property<int>("SizeRows")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("DynamicDashboard.Models.ChartData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChartData");
                });

            modelBuilder.Entity("DynamicDashboard.Models.DataSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChartDataId")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChartDataId");

                    b.ToTable("Dataset");
                });

            modelBuilder.Entity("DynamicDashboard.Models.Chart", b =>
                {
                    b.HasOne("DynamicDashboard.Models.ChartData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");
                });

            modelBuilder.Entity("DynamicDashboard.Models.DataSet", b =>
                {
                    b.HasOne("DynamicDashboard.Models.ChartData", null)
                        .WithMany("Datasets")
                        .HasForeignKey("ChartDataId");
                });

            modelBuilder.Entity("DynamicDashboard.Models.ChartData", b =>
                {
                    b.Navigation("Datasets");
                });
#pragma warning restore 612, 618
        }
    }
}
